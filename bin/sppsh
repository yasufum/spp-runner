#!/usr/bin/env python
# coding: utf-8

import sys
import yaml
import re
import argparse
import subprocess

dns_file = "/var/lib/libvirt/dnsmasq/virbr0.status"

parser = argparse.ArgumentParser(description="Login VM listed in %s" % dns_file)
parser.add_argument(
        "hostname",
        nargs="?",
        type=str,
        help="Login host")
parser.add_argument(
        "-l", "--list", 
        action="store_true",
        help="Show entries")
parser.add_argument(
        "-u", "--update", 
        type=str,
        help="Update hostname by id or ipaddr")
parser.add_argument(
        "--shutdown", 
        action="store_true",
        help="Shutdown VM")
parser.add_argument(
        "--shutdown-all", 
        action="store_true",
        help="Shutdown all VMs")
args = parser.parse_args()


def main():
    f = open(dns_file, "r")
    y = yaml.load(f)
    f.close()

    if len(y) == 0:
        print("No VMs running...")
        exit()

    
    if args.shutdown_all == True:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            subprocess.call([
                "ssh",
                "-t",
                y[i]["ip-address"],
                "sudo",
                "shutdown",
                "-h",
                "now"])

    # show entries
    elif args.hostname == None or args.list == True:
        i = 0
        for ent in y:
            if ent.has_key("hostname") == True:
                hn = ent["hostname"]
            else:
                hn = ""
            print("id:%s, host:%s, ipaddr:%s" % (i, hn, ent["ip-address"]))
            i += 1
        exit()

    # Update hostname
    elif args.update != None:
        if re.match(r'^\d+\.\d+\.\d+\.\d+$', args.update): # ipaddr
            h = args.update
        elif re.match(r'^\d+$', args.update): # or index number
            idx = int(args.update)
            if idx < len(y):
                h = y[idx]["ip-address"]
        else:
            print("Invalid ipaddr or id!")
            raise

        # Update hostname and reboot
        subprocess.call([
            "ssh",
            "-t",
            str(h),
            "sudo",
            "hostnamectl",
            "set-hostname",
            str(args.hostname)])
        subprocess.call([
            "ssh",
            "-t",
            str(h),
            "sudo",
            "reboot"])

    # Shutdown VM
    elif args.shutdown == True:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            if y[i].has_key("hostname") == True:
                hn = y[i]["hostname"]
            else:
                hn = ""

            if (hn == args.hostname) or re.match(str(i), args.hostname):
                subprocess.call([
                    "ssh",
                    "-t",
                    y[i]["ip-address"],
                    "sudo",
                    "shutdown",
                    "-h",
                    "now"])
                exit()

    # Login
    else:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            if y[i].has_key("hostname") == True:
                hn = y[i]["hostname"]
            else:
                hn = ""

            if (hn == args.hostname) or re.match(str(i), args.hostname):
                subprocess.call(["ssh", y[i]["ip-address"]])
                exit()

        # hostname not found
        print("No such hostname: '%s'" % args.hostname)


if __name__ == '__main__':
    main()
