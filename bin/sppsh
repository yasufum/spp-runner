#!/usr/bin/env python
# coding: utf-8

import sys
import yaml
import re
import argparse
import subprocess

dns_file = "/var/lib/libvirt/dnsmasq/virbr0.status"

parser = argparse.ArgumentParser(description="Login VM listed in %s" % dns_file)
parser.add_argument(
        "hostname",
        nargs="?",
        type=str,
        help="Login host")
parser.add_argument(
        "-l", "--list", 
        action="store_true",
        help="Show entries")
parser.add_argument(
        "-u", "--update", 
        metavar=("ipaddr", "new_hostname"),
        nargs=2,
        type=str,
        help="Update hostname of ipaddr or id")
parser.add_argument(
        "-r", "--run",
        metavar=('ipaddr', 'cmd'),
        nargs=2,
        type=str,
        help="Run command on the VM of ipaddr or id " +
        "(exp: sppsh -r 0 'touch a.txt')")
parser.add_argument(
        "--shutdown", 
        action="store_true",
        help="Shutdown VM")
parser.add_argument(
        "--shutdown-all", 
        action="store_true",
        help="Shutdown all VMs")
args = parser.parse_args()


def get_ipaddr(target, addr_table):
    """
    Resolve IP address from given target

    target must be an IP addr or index of addr_table
    addr_table is a yaml obj of "/var/lib/libvirt/dnsmasq/virbr0.status"
    """
    if re.match(r'^\d+\.\d+\.\d+\.\d+$', target): # ipaddr
        ipaddr = args.update[0]
    elif re.match(r'^\d+$', target): # or index number
        idx = int(target)
        if idx < len(addr_table):
            ipaddr = addr_table[idx]["ip-address"]
    else:
        print("Invalid ipaddr or id!")
        raise
    return ipaddr


def main():
    f = open(dns_file, "r")
    y = yaml.load(f)
    f.close()

    if len(y) == 0:
        print("No VMs running...")
        exit()

    if args.shutdown_all == True:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            subprocess.call([
                "ssh", "-t", y[i]["ip-address"],
                "sudo", "shutdown", "-h", "now"
                ])

    # Update hostname
    elif args.update != None:
        ipaddr = get_ipaddr(args.update[0], y)

        # Update hostname and reboot
        subprocess.call([
            "ssh", "-t", str(ipaddr),
            "sudo", "hostnamectl", "set-hostname", str(args.update[1])
            ])
        subprocess.call([
            "ssh", "-t", str(ipaddr),
            "sudo", "reboot"
            ])

    # Run secondary process
    elif args.run != None:
        ipaddr = get_ipaddr(args.run[0], y)
        cmd = args.run[1]

        subprocess.call(
            ["ssh", "-t", str(ipaddr)] +
            cmd.split(", ")
            )

    # Shutdown VM
    elif args.shutdown == True:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            if y[i].has_key("hostname") == True:
                hn = y[i]["hostname"]
            else:
                hn = ""

            if (hn == args.hostname) or re.match(str(i), args.hostname):
                subprocess.call([
                    "ssh", "-t", y[i]["ip-address"],
                    "sudo", "shutdown", "-h", "now"
                    ])
                exit()

    # show entries
    elif args.hostname == None or args.list == True:
        i = 0
        for ent in y:
            if ent.has_key("hostname") == True:
                hn = ent["hostname"]
            else:
                hn = ""
            print("id:%s, host:%s, ipaddr:%s" % (i, hn, ent["ip-address"]))
            i += 1
        exit()

    # Login
    else:
        for i in range(0, len(y)):
            # Avoid error for empty hostname
            if y[i].has_key("hostname") == True:
                hn = y[i]["hostname"]
            else:
                hn = ""

            if (hn == args.hostname) or re.match(str(i), args.hostname):
                subprocess.call(["ssh", y[i]["ip-address"]])
                exit()

        # hostname not found
        print("No such hostname: '%s'" % args.hostname)


if __name__ == '__main__':
    main()
